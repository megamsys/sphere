var current_user, current_organisation, current_locale, websocket_url;

// Temporary disable Turbolinks page cache functionality to solve back-button related problems.
// TODO: implement real solution for this and other Turbolinks problems and re-enable page cache.
Turbolinks.pagesCached(0);

APP.init = function() {
  // Load current_user and current_organisation data
  var body = $('body');
  current_user = { id: parseInt(body.data('current-user-id')), name: body.data('current-user-name') };
  current_organisation = { id: parseInt(body.data('current-organisation-id')) };
  current_locale = body.data('current-locale');
  websocket_url = body.data('websocket-url');
  this.global.initLocale(current_locale);

  // Replace AJAX spinner with svg version if SMIL animations are available
  if(Modernizr.backgroundsize && Modernizr.smil) {
    $('img.ajax-wait').attr('src', '<%= asset_path('ajax_wait.svg') %>');
    $('.ajax-wait:not(img)').css('background-image', 'url("<%= asset_path('ajax_wait.svg') %>") !important');
  }

  // Replace logo with svg version if svg is available
  if (Modernizr.svg) {
    $('#logo-container .logo').attr('src', '<%= asset_path('logo_in_app.jpg') %>');
  }

  if ($('#header:visible').length > 0) {
    // Load the menu
    this.global.menuInit();
    this.global.searchBarInit();

    // Load the feedback module
    new CwicFeedback({
      open_button_id: 'open-feedback-button',
      backend_url: Routes.feedbacks_path({ format: 'json' })
    });
  }

  // Load the api for the local menu
  this.global.loadLocalMenu();

  // Replace default confirm box with our confirm
  this.global.replaceConfirmBox();

  // Load stickies (if #note-container is present)
  this.stickies.loadStickies();

  // Set the upper nprogress bar as the default ajax complete and start handlers
  this.global.addProgressbarToAjax();

  // Initialize special form fields, such as date- and timepickers, special Cwic Controls (select, checkbox, ...)
  this.global.initializeSpecialFormFields();

  // Initialize sortables
  this.global.initializeSortables();

  // Make select all button on tables work
  this.global.bindSelectAllCheckboxEvents();

  // Add select2 in tagging mode to taggling list text field
  this.global.loadTaggingSelect2Box();

  // Initialize Images containers
  $('div.images-container').magnificPopup({ delegate: "a:not('.action-button')", type: 'image',  gallery: { enabled: true } });

  // Auto submit limiting fields
  $('#limiting select').on('change', function() { this.form.submit(); });

  this.global.bindHelpModalEvents();

  this.global.contentAreaResize();
  $(window).on('resize', function() {
    APP.global.contentAreaResize();
  });

  $(document).keydown(function(event) {
    /* Close search bar when esc button is pressed */
    if(event.keyCode == 27) {
      APP.global.slideSearchBar('collapse');
    }
  });
};

// Add progress bar for Turbolink requests
$(document).on('page:fetch', function() { NProgress.stackPush(); });
$(document).on('page:load', function() { NProgress.stackPop(); });
$(document).on('page:restore', function() { NProgress.remove(); });

APP.global = {
  initLocale: function(locale) {
    $.datepicker.setDefaults($.datepicker.regional[locale]);
    jsLang = jsLangs[locale]; // TODO this is not very nice. Better to rewrite whole custom application JavaScript translations to I18n-js gem (if it is stable, ask Kevin for more information)
  },
  bindHelpModalEvents: function() {
    $('.help i').on('click', function() {
      var content = $('<p>');
      content.text($(this).attr('title'));
      APP.modal.openModal('help-modal', content);
    });
  },
  bindSelectAllCheckboxEvents: function() {
    $('input.select-all-checkbox').siblings('div.cwic-checkbox').on('click', function() {
      var select_all_button = $(this).siblings('input.select-all-checkbox');
      select_all_button.parents('table').find('input.select-all-child').prop('checked', select_all_button.is(':checked')).trigger('change');
    });

    $('input.select-all-child').on('change', function() {
      var select_all_child = $(this);
      var select_all_childs = select_all_child.parents('table').find('input.select-all-child');
      var select_all_button = select_all_child.parents('table').find('input.select-all-checkbox');

      var all_selected = true;
      select_all_childs.each(function() {
        if(!$(this).is(':checked')) {
          all_selected = false;
          // We dont need to continue the each loop
          return false;
        }
      });

      select_all_button.prop('checked', all_selected).trigger('change');

    });
  },
  contentAreaResize: function(location) {
    if(Modernizr.flexbox) {
      return;
    }
    $('#page-wrapper').css({top: $('#search-bar').is('.open') ? $('#header').outerHeight() + 'px' : $('#header').outerHeight() - $('#search-bar').outerHeight() + 'px'});
    if (!Modernizr.csstransforms) {
      $('#header').css({top: -$('#header').outerHeight() + 'px'});
    }
    $('#content-area').css({top: $('#local-menu').outerHeight() + 'px'});
  },
  menuInit: function() {
    var $submenuBox = $('#submenu-box');
    var $menuItems = $('#main-menu > li');

    var $activeMenuItem = $('#main-menu > li.active').first();
    if($activeMenuItem.length > 0) {
      // Open the active menu without animation
      this.slideSubMenuByMenuItem($activeMenuItem.attr('id'), false);
    }
    $('#main-menu > li > a').on('click', function() {
      return APP.global.slideSubMenuByMenuItem($(this).parent('li').attr('id'), true);
    });

    $('a#collapse-menu').on('click', function() {
      var $link = $(this);
      var $submenuBox = $('#submenu-box');
      var $submenu = $submenuBox.find('> .submenu.selected').first();
      if ($submenuBox.hasClass('open')) {
        APP.global.slideSubMenu($submenu, 'collapse', true, function() {
          $('li#' + $submenu.data('main-menu-relation')).removeClass('selected');
        });
      } else {
        var $lastSubmenu = $submenuBox.find('> .submenu[data-main-menu-relation="' + $submenuBox.data('last-opened-menu-item') + '"]').first();
        APP.global.slideSubMenu($lastSubmenu, 'expand', true, function() {
          $link.removeClass('icon-chevron-right').addClass('icon-chevron-left');
          $('li#' + $lastSubmenu.data('main-menu-relation')).addClass('selected');
        });
      }
    });
  },
  loadLocalMenu: function(){
    window.localMenu = new CwicLocalMenu($('div#local-menu'));
  },
  searchBarInit: function() {
    var $searchBar = $('#search-bar');
    $('#open-search-button').on('click', function() {
      $(window).trigger('header-start-animation');
      APP.global.slideSearchBar($searchBar.hasClass('open') ? 'collapse' : 'expand');
      return false;
    });
  },
  slideSearchBar: function(action) {
    var $searchField = $('#global_search_query');

    var complete = function() {
      $(window).trigger('header-animated');
      if (action == 'expand') {
        $searchField.select();
      }
    };

    $('#open-search-button').toggleClass('open', action == 'expand');

    if (Modernizr.flexbox) {
      APP.util.expandCollapse('#search-bar', {action: action, direction: 'vertical', duration: 150, targetDimension: 'auto'}, complete);
    } else {
      var $pageWrapper = $('#page-wrapper');
      var $searchBar = $('#search-bar');
      $pageWrapper.velocity({top: (action == 'expand' ? $('#header').outerHeight() : $('#menu-bar').outerHeight()) + 'px'}, 150, 'swing', function() {
        $searchBar.toggleClass('open', action == 'expand');
        complete();
      });
    }
  },
  addProgressbarToAjax: function() {
    NProgress.configure({ container: $('#progress-bar-container'), showSpinner: false });

    $(document).ajaxStart(function() {
      NProgress.stackPush();
    });

    $(document).ajaxComplete(function() {
      NProgress.stackPop();
    });
  },
  slideSubMenuByMenuItem: function(htmlId, animated) {
    var $menuItem = $('#' + htmlId);
    var $relatedSubmenu = $('#submenu-box > .submenu[data-main-menu-relation="' + htmlId + '"]').first();

    if (!htmlId || $relatedSubmenu.length == 0 || $menuItem.length == 0) {
      return true;
    } else {
      var $submenuBox = $('#submenu-box');
      var $menuItems = $('#main-menu > li');

      APP.global.slideSubMenu($relatedSubmenu, $submenuBox.hasClass('open') ? 'switch' : 'expand', animated, function() {
        $menuItems.removeClass('selected');
        $menuItem.addClass('selected');
      });
      return false;
    }
  },
  slideSubMenu: function(submenu, action, animated, executeBefore, executeAfter) {
    var $submenu = $(submenu);
    var $collapseLink = $('a#collapse-menu');
    var executeBefore = executeBefore ? executeBefore : function() {};
    var executeAfter = executeAfter ? executeAfter : function() {};
    var duration = animated ? 200 : 0;

    switch(action) {
      case 'expand':
      case 'collapse':
        var $submenuBox = $('#submenu-box');

        executeBefore();

        var complete = executeAfter;
        if (action == 'expand') {
          APP.global.slideSubMenu($submenu, 'switch', false);
          $collapseLink.removeClass('icon-chevron-right').addClass('icon-chevron-left');
        } else {
          var $submenus = $submenuBox.find('> .submenu');
          $submenuBox.data('last-opened-menu-item', $submenu.data('main-menu-relation'));
          $collapseLink.removeClass('icon-chevron-left').addClass('icon-chevron-right');
          complete = function() {
            $submenus.removeClass('selected');
            $submenuBox.removeClass('open');
            executeAfter();
          };
        }

        if (Modernizr.flexbox) {
          APP.util.expandCollapse($submenuBox, {action: action, direction: 'horizontal', duration: duration, targetDimension: ''}, complete);
        } else {
          var $mainArea = $('#main-area');
          if (animated) {
            $submenuBox.addClass('open');
            $mainArea.velocity({left: action == 'expand' ? $submenuBox.outerWidth() + 'px' : 0}, duration, 'swing', complete);
          } else {
            $submenuBox.addClass('open');
            $mainArea.css({left: action == 'expand' ? $submenuBox.outerWidth() + 'px' : 0});
            executeAfter();
          }
        }
        break;
      case 'switch':
        if (!$submenu.hasClass('selected')) {
          executeBefore();
          var $submenus = $('#submenu-box > .submenu');
          if (animated) {
            $submenus.velocity({opacity: 0}, duration/2.5, 'swing', function() {
              $submenus.removeClass('selected');
              $submenu.velocity({opacity: 1}, duration/2.5, 'swing', function() {
                $submenu.addClass('selected');
                executeAfter();
              });
            });
          } else {
            $submenus.css({opacity: 0}).removeClass('selected');
            $submenu.css({opacity: 1}).addClass('selected');
            executeAfter();
          }
        }
        break;
    }
  },
  replaceConfirmBox: function() {
    $.rails.allowAction = function(element) {
      if(element.data('skip-confirm-once')) { element.data('skip-confirm-once', null); return true; }

      var message = element.data('confirm');
      if(!message) { return true; }

      if($.rails.fire(element, 'confirm')) {
        APP.global.createConfirmBox(element, message);
      }
      return false;
    };
    $.rails.allowActionAnswer = function(element, answer) {
      callback = $.rails.fire(element, 'confirm:complete', [answer]);
      if(answer && callback) {
        element.data('skip-confirm-once', true); // Skip the confirm question once
        element.trigger('click'); // Replay the action. Note this works for certain elements (links, buttons, etc.), but probably not all kinds.
      }
    };
  },
  createConfirmBox: function(element, message) {
    var content = $('<div>');

    content.append($('<p>', { text: message, class: 'confirm-question' }));

    var notOkButton = $('<a>', { class: 'button red', text: jsLang.global.no });
    var okButton = $('<a>', { class: 'button green', text: jsLang.global.yes });

    var okAction = function() { APP.modal.closeModal(); $.rails.allowActionAnswer(element, true); };

    notOkButton.on('click', function() { APP.modal.closeModal(); $.rails.allowActionAnswer(element, false); });
    okButton.on('click', okAction);

    $(document).on('keyup.enter', function(e) {
      e.preventDefault();
      if (e.keyCode == 13) { okAction(); }
    });

    content.append(notOkButton);
    content.append(okButton);

    APP.modal.openModal('confirm', content);
  },
  initializeSpecialFormFields: function(parent) {
    if(!parent) {
      parent = document.body;
    }
    $parent = $(parent);
    $parent.find(':radio, :checkbox, input[type=file]').cwicControl();
    $parent.find('select').select2({
      width: 'resolve',
      minimumResultsForSearch: -1,
    });
    $parent.find('.datepicker-field').datepicker();
    $parent.find('.timepicker-field').clockpicker({ autoclose: true });
    $parent.find('.colorpicker-field').minicolors();
    $parent.find('input.organisation_client_select').each(this.initializeOrganisationClientSelect);
    $parent.find('input.with-clear').each(this.initializeInputWithClear);

    $parent.find('.autosubmit').on('change', function() {
      $field = $(this);
      if($field.hasClass('select2-offscreen')) {
        $field.prev('.select2-container').addClass('autosubmit-busy');
      }
      $field.closest('form').trigger('submit');
    });

    $(document).on('nested:fieldAdded', function(e) { APP.global.initializeSpecialFormFields(e.field); });
  },
  initializeSortables: function() {
    $('.sortable').sortable({
      placeholder: 'ui-state-highlight',
      handle: 'div.sort-handle',
      start: function(e, ui) {
        ui.placeholder.height(ui.item.outerHeight());
        ui.placeholder.width(ui.item.outerWidth());
      },
      helper: function(e, ui) {
        // Fix width of table cells if draggable (ui) is a tr
        if(ui.is('tr')) {
          ui.children().each(function() {
            $(this).width($(this).width());
          });
        }
        return ui;
      },
      stop: function(e, ui) {
        $.patch($(this).data('sort-update-url'), $(this).sortable('serialize'));
      }
    });
  },
  initializeInputWithClear: function() {
    var input = $(this);
    if(input.val() != '') {
      input.wrap('<div class="field-with-clear"></div>');
      var span = $('<span>', { text: 'X' });
      input.after(span);
      span.on('click', function() {
        input.val(null);
        $(this).remove();
        input.unwrap();
        input.trigger('change');
      });
    }
  },
  initializeOrganisationClientSelect: function() {
    $(this).select2({
      initSelection: function(element, callback) {
          var id = $(element).val();
          var text = $(element).data('prev-selected') || jsLang.reservations.select_client_placeholder;
          return callback({id: id, text: text });
      },
      placeholder: jsLang.reservations.select_client_placeholder,
      minimumInputLength: 1,
      width: 'resolve',
      ajax: {
        url: Routes.autocomplete_organisation_organisation_clients_path(current_organisation, { format: 'json' }),
        dataType: 'json',
        quietMillis: 500,
        data: function(term, page) {
          return { q: term, page: page };
        },
        results: function(data, page) {
          return data;
        }
      },
    });
  }, 
  loadTaggingSelect2Box: function() {
    $('.tags-field').each(function() {
      var tagField = $(this);
      var saved = tagField.data('saved').map(function(item) { return { id: item, name: item } });
      tagField.select2({
        tags: true,
        placeholder: jsLang.global.add_tags,
        minimumInputLength: 1,
        initSelection : function(element, callback) {
          saved && callback(saved);
        },
        tokenSeparators: [','],
        multiple: true,
        ajax: {
          type: 'POST',
          url: Routes.tag_search_organisation_path(current_organisation),
          dataType: 'json',
          quietMillis: 200,
          data:    function(term) { return { tag_part: term }; },
          results: function(data) { return { results: data.map(function(item) { return { id: item.name, name: item.name } }) }; }
        },
        createSearchChoice: function(term, data) {
          var filterFunction = function() {
            return this.name.localeCompare(term) === 0;
          };

          if($(data).filter(filterFunction).length === 0) {
            return { id: term.toLowerCase(), name: term.toLowerCase() };
          }
        },
        formatResult:    function(item, page){ return APP.util.ucFirst(item.name); },
        formatSelection: function(item, page){ return APP.util.ucFirst(item.name); }
      });
    });
  }
};
